// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _ZigZag_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// createEngine
Rcpp::List createEngine(int dimension, std::vector<double>& mask, std::vector<double>& observed, std::vector<double>& parameterSign, long flags, long info, long seed);
RcppExport SEXP _ZigZag_createEngine(SEXP dimensionSEXP, SEXP maskSEXP, SEXP observedSEXP, SEXP parameterSignSEXP, SEXP flagsSEXP, SEXP infoSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type observed(observedSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type parameterSign(parameterSignSEXP);
    Rcpp::traits::input_parameter< long >::type flags(flagsSEXP);
    Rcpp::traits::input_parameter< long >::type info(infoSEXP);
    Rcpp::traits::input_parameter< long >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(createEngine(dimension, mask, observed, parameterSign, flags, info, seed));
    return rcpp_result_gen;
END_RCPP
}
// doSomething
void doSomething(SEXP sexp, std::vector<double>& data);
RcppExport SEXP _ZigZag_doSomething(SEXP sexpSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type data(dataSEXP);
    doSomething(sexp, data);
    return R_NilValue;
END_RCPP
}
// getNextEvent
Rcpp::List getNextEvent(SEXP sexp, NumericVector& position, NumericVector& velocity, NumericVector& action, NumericVector& gradient, NumericVector& momentum);
RcppExport SEXP _ZigZag_getNextEvent(SEXP sexpSEXP, SEXP positionSEXP, SEXP velocitySEXP, SEXP actionSEXP, SEXP gradientSEXP, SEXP momentumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type position(positionSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type velocity(velocitySEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type action(actionSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type gradient(gradientSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type momentum(momentumSEXP);
    rcpp_result_gen = Rcpp::wrap(getNextEvent(sexp, position, velocity, action, gradient, momentum));
    return rcpp_result_gen;
END_RCPP
}
// operate
Rcpp::List operate(SEXP sexp, Function rCallback, NumericVector& position, NumericVector& velocity, NumericVector& action, NumericVector& gradient, NumericVector& momentum, double time);
RcppExport SEXP _ZigZag_operate(SEXP sexpSEXP, SEXP rCallbackSEXP, SEXP positionSEXP, SEXP velocitySEXP, SEXP actionSEXP, SEXP gradientSEXP, SEXP momentumSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< Function >::type rCallback(rCallbackSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type position(positionSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type velocity(velocitySEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type action(actionSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type gradient(gradientSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(operate(sexp, rCallback, position, velocity, action, gradient, momentum, time));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ZigZag_rcpp_hello_world", (DL_FUNC) &_ZigZag_rcpp_hello_world, 0},
    {"_ZigZag_createEngine", (DL_FUNC) &_ZigZag_createEngine, 7},
    {"_ZigZag_doSomething", (DL_FUNC) &_ZigZag_doSomething, 2},
    {"_ZigZag_getNextEvent", (DL_FUNC) &_ZigZag_getNextEvent, 6},
    {"_ZigZag_operate", (DL_FUNC) &_ZigZag_operate, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_ZigZag(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
